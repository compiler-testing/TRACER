
# dialect enum
import random

class Dialect:
    LINALG = 'linalg'
    AFFINE = 'affine'
    SCF = 'scf'
    CF = 'cf'
    LLVM = 'llvm'
    TOSA = 'tosa'
    ARITH = 'arith'
    VECTOR = 'vector'

class LowerPass:
    all = [
        '-tosa-to-arith',
        '-pass-pipeline=\"builtin.module(func.func(tosa-to-linalg))\"',
        # '-pass-pipeline=\"builtin.module(func.func(tosa-to-linalg-named,tosa-to-linalg))\"',
        '-tosa-to-tensor',
        '-tosa-to-scf',
        '-func-bufferize',
        '-gpu-kernel-outlining',
        '-linalg-bufferize',
        '-empty-tensor-to-alloc-tensor',
        # '-linalg-init-tensor-to-alloc-tensor',
        '-convert-linalg-to-affine-loops',
        '-convert-linalg-to-llvm',
        '-convert-linalg-to-loops',
        '-convert-linalg-to-parallel-loops',
        '-convert-linalg-to-std',
        '-lower-affine',
        '-affine-super-vectorize',
        '-affine-super-vectorize="virtual-vector-size=128"',
        '-affine-super-vectorize="virtual-vector-size=4,8"',
        '-affine-super-vectorize="vectorize-reductions=true"',
        '-affine-super-vectorizer-test',
        '-convert-parallel-loops-to-gpu',
        '-convert-arith-to-llvm',
        '-convert-arith-to-spirv',
        '-convert-scf-to-cf',
        '-convert-scf-to-spirv',
        '-convert-scf-to-openmp',
        '-convert-cf-to-llvm',
        '-convert-cf-to-spirv',
        '-convert-bufferization-to-memref',
        '-convert-complex-to-libm',
        '-convert-complex-to-llvm',
        '-convert-complex-to-standard',
        '-pass-pipeline=\"builtin.module(func.func(convert-affine-for-to-gpu))\"',
        # '-pass-pipeline="builtin.module(func.func(convert-affine-for-to-gpu{gpu-block-dims=1 gpu-thread-dims=1}))"',
        # '-pass-pipeline="builtin.module(func.func(convert-affine-for-to-gpu{gpu-block-dims=1 gpu-thread-dims=0}))"',
        # '-pass-pipeline="builtin.module(func.func(convert-affine-for-to-gpu{gpu-block-dims=0 gpu-thread-dims=1}))"',
        '-llvm-optimize-for-nvvm-target',
        '-convert-math-to-libm',
        '-convert-math-to-llvm',
        '-convert-math-to-spirv',
        '-convert-memref-to-spirv',
        '-convert-memref-to-llvm',
        '-convert-pdl-to-pdl-interp',
        '-lower-host-to-llvm',
        '-convert-gpu-to-rocdl',
        '-gpu-to-llvm',
        '-convert-gpu-launch-to-vulkan-launch',
        '-convert-gpu-to-spirv',
        '-convert-gpu-to-nvvm',
        '-convert-nvgpu-to-nvvm',
        '-convert-spirv-to-llvm',
        '-convert-openmp-to-llvm',
        '-convert-openacc-to-scf',
        '-convert-openacc-to-llvm',
        '-convert-async-to-llvm',
        '-async-to-async-runtime',
        '-convert-shape-constraints',
        '-convert-shape-to-std',
        # '-convert-func-to-llvm'
        '-lower-host-to-llvm',
        '-convert-spirv-to-llvm',
        '-convert-vector-to-spirv',
        '-convert-vector-to-llvm="enable-amx"',
        '-convert-vector-to-scf',
        '-convert-vector-to-gpu'
        # '-convert-vector-to-rocdl'
        ]

    tosa_to_linalg = '-tosa-infer-shapes  -tosa-to-arith  -tosa-to-linalg'

    bufferize = '-func-bufferize  -linalg-bufferize'

    linalg_to_affine = '-convert-linalg-to-affine-loops'

    affine_to_scf = '-lower-affine'
    affine_to_vector = '-affine-super-vectorize="virtual-vector-size=4,8"'

    scf_to_cf = '-convert-scf-to-cf'
    scf_to_spirv = '-convert-scf-to-spirv'
    scf_to_openmp = '-convert-scf-to-openmp'

    vector_to_scf = '-convert-vector-to-scf'
    vector_to_gpu = '-pass-pipeline="func.func(convert-vector-to-gpu)"'
    vector_to_spirv = '-convert-vector-to-spirv'
    vector_to_llvm = '-convert-vector-to-llvm="enable-amx"'

    gpu_to_spirv = '-convert-gpu-to-spirv'
    gpu_to_nvvm = '-convert-gpu-to-nvvm'

    spirv_to_llvm ='-convert-spirv-to-llvm'
    openmp_to_llvm = '-convert-openmp-to-llvm'
    cf_to_llvm = '-convert-func-to-llvm'

class AllPass:
    all =[
        # ==================== General options:
        '-allow-unregistered-dialect',
        '-disable-i2p-p2i-opt', 
        # '-dump-pass-pipeline',
        # '-emit-bytecode',   输出成二进制
        '-generate-merged-base-profiles',
        '-mlir-disable-threading',
        '-mlir-pass-pipeline-local-reproducer',
        '-mlir-pass-statistics',
        '-mlir-pass-statistics-display=list',
        '-mlir-pass-statistics-display=pipeline',
        '-mlir-pretty-debuginfo',
        '-mlir-print-debug-counter',
        '-mlir-print-debuginfo',
        '-mlir-print-elementsattrs-with-hex-if-larger=1',
        '-mlir-print-ir-after=cse',
        '-mlir-print-ir-after-all',
        '-mlir-print-ir-after-change',
        '-mlir-print-ir-after-failure',
        '-mlir-print-ir-before=cse',
        '-mlir-print-ir-before-all',
        '-mlir-print-ir-module-scope',
        '-mlir-print-local-scope',
        '-mlir-print-op-on-diagnostic',
        # '-mlir-print-stacktrace-on-diagnostic',
        # '-mlir-print-value-users',
        # '-mlir-timing',
        # '-mlir-timing-display=tree',
        # '-mlir-timing-display=list'
        '-no-implicit-module',
        '-opaque-pointers',
        # '-show-dialects',
        '-split-input-file',
        '-test-legalize-mode=analysis',
        '-test-legalize-mode=full',
        '-test-legalize-mode=partial',

        # ================= Compiler passes to run,Passes:
        '-affine-data-copy-generate',
        '-affine-data-copy-generate="generate-dma=false fast-mem-space=0 fast-mem-capacity=1"',
        '-affine-data-copy-generate="generate-dma=false fast-mem-space=0 skip-non-unit-stride-loops" ',
        '-affine-data-copy-generate="generate-dma fast-mem-space=2 skip-non-unit-stride-loops"',
        '-affine-data-copy-generate="generate-dma fast-mem-capacity=16 fast-mem-space=2"',
        '-affine-expand-index-ops',
        '-affine-loop-coalescing',
        '-affine-loop-fusion',
        '-affine-loop-fusion=fusion-maximal',
        '-affine-loop-fusion=mode=producer',
        '-affine-loop-fusion=mode=sibling',
        '-affine-loop-fusion=mode=greedy',
        '-affine-loop-invariant-code-motion',
        '-affine-loop-normalize',
        '-affine-loop-normalize="promote-single-iter=1"',
        '-affine-loop-tile',
        '-affine-loop-tile="tile-size=32" ',
        '-affine-loop-tile="cache-size=512"',
        '-affine-loop-tile="tile-size=32 separate"',
        '-affine-loop-unroll',
        '-affine-loop-unroll="unroll-factor=5 cleanup-unroll=true" ',
        '-affine-loop-unroll="unroll-full"',
        '-affine-loop-unroll="unroll-factor=5"',
        '-affine-loop-unroll="unroll-factor=6 unroll-up-to-factor=true"',
        '-affine-loop-unroll-jam',
        '-affine-loop-unroll-jam="unroll-jam-factor=2" ',
        '-affine-parallelize',
        '-affine-parallelize=max-nested=1',
        '-affine-parallelize=parallel-reductions=1',
        '-affine-pipeline-data-transfer',
        '-affine-scalrep',
        '-affine-simplify-structures',
        '-affine-super-vectorize',
        '-affine-super-vectorize="virtual-vector-size=128 test-fastest-varying=0"  ',
        '-affine-super-vectorize="virtual-vector-size=4,8"',
        '-affine-super-vectorize="vectorize-reductions=true"',
        '-affine-super-vectorizer-test',
        '-arith-bufferize',
        '-arith-bufferize=alignment=64',
        '-arith-emulate-wide-int',
        '-arith-emulate-wide-int="widest-int-supported=32"',
        '-arith-expand',
        '-arith-unsigned-when-equivalent',
        '-arm-neon-2d-to-intr',
        '-async-func-to-async-runtime',
        '-async-parallel-for',
        '-async-parallel-for=async-dispatch=true',
        '-async-parallel-for="num-workers=20"',                    
        '-async-parallel-for="min-task-size=1"',
        '-async-runtime-policy-based-ref-counting',
        '-async-runtime-ref-counting',
        '-async-runtime-ref-counting-opt',
        '-async-to-async-runtime',
        '-buffer-deallocation',
        '-buffer-hoisting',
        '-buffer-loop-hoisting',
        '-buffer-results-to-out-params',
        '-bufferization-bufferize',
        '-canonicalize',
        '-canonicalize="test-convergence"',
        '-canonicalize="top-down=0"',
        '-canonicalize=disable-patterns=TestRemoveOpWithInnerOps',
        '-canonicalize=enable-patterns=TestRemoveOpWithInnerOps',
        '-canonicalize=region-simplify=false',
        # '-pipeline-pipeline="builtin.module(func.func(cse,canonicalize{max-iterations=1 max-num-rewrites=-1 region-simplify=false top-down=false}))"',
        '-control-flow-sink',
        '-convert-amdgpu-to-rocdl',
        '-convert-amdgpu-to-rocdl=chipset=gfx1030',
        '-convert-arith-to-llvm',
        '-convert-arith-to-llvm=index-bitwidth=32',
        '-convert-arith-to-spirv',
        '-convert-arith-to-spirv=enable-fast-math',
        '-convert-func-to-spirv="emulate-lt-32-bit-scalar-types=false" ',
        '-convert-async-to-llvm',
        '-convert-func-to-spirv="emulate-lt-32-bit-scalar-types=false"',
        '-convert-bufferization-to-memref',
        '-convert-cf-to-llvm',
        '-convert-cf-to-llvm="index-bitwidth=32"',
        '-convert-cf-to-spirv',
        '-convert-cf-to-spirv="emulate-lt-32-bit-scalar-types=false"',
        '-convert-complex-to-libm',
        '-convert-complex-to-llvm',
        '-convert-complex-to-standard',
        '-convert-elementwise-to-linalg',
        '-convert-func-to-llvm',
        '-convert-func-to-llvm=use-bare-ptr-memref-call-conv=1',
        '-convert-func-to-llvm=index-bitwidth=32',
        '-convert-func-to-spirv',
        '-convert-func-to-spirv="emulate-lt-32-bit-scalar-types=false"',
        '-convert-gpu-launch-to-vulkan-launch',
        '-convert-gpu-to-nvvm',
        '-convert-gpu-to-nvvm="has-redux=1"',
        '-convert-gpu-to-nvvm="index-bitwidth=32"',
        '-convert-gpu-to-rocdl',
        '-convert-gpu-to-rocdl=use-bare-ptr-memref-call-conv=true',
        '-convert-gpu-to-rocdl=index-bitwidth=32',
        '-convert-gpu-to-rocdl="index-bitwidth=32 runtime=HIP"',
        '-convert-gpu-to-rocdl=runtime=unknown',
        '-convert-gpu-to-rocdl=runtime=OpenCL',
        '-convert-gpu-to-rocdl="chipset=%chip index-bitwidth=32"',
        '-convert-gpu-to-spirv',
        # '-convert-gpu-to-spirv="use-64bit-index=true"',
        '-convert-index-to-llvm',
        '-convert-index-to-llvm=index-bitwidth=32',
        '-convert-linalg-to-affine-loops',
        '-convert-linalg-to-llvm',
        # '-convert-linalg-to-llvm=use-opaque-pointers=true', #no such option use-opaque-pointers
        '-convert-linalg-to-loops',
        '-convert-linalg-to-parallel-loops',
        '-convert-linalg-to-std',
        '-convert-math-to-funcs',
        '-convert-math-to-funcs=min-width-of-fpowi-exponent=33',
        '-convert-math-to-libm',
        '-convert-math-to-llvm',
        #'-approximate-log1p',
        '-convert-math-to-spirv',
        '-convert-memref-to-spirv',
        '-convert-memref-to-spirv="bool-num-bits=8"',
        '-convert-nvgpu-to-nvvm',
        #'-use-opaque-pointers',
        '-convert-openacc-to-llvm',
        #'-use-opaque-pointers',
        '-convert-openacc-to-scf',
        '-convert-openmp-to-llvm',
        '-convert-parallel-loops-to-gpu',
        '-convert-pdl-to-pdl-interp',
        '-convert-scf-to-cf',
        '-convert-scf-to-openmp',
        #'-use-opaque-pointers',
        '-convert-scf-to-spirv',
        '-convert-shape-constraints',
        '-convert-shape-to-std',
        '-convert-spirv-to-llvm',
        #'-use-opaque-pointers',
        '-convert-tensor-to-linalg',
        '-convert-tensor-to-spirv',
        '-convert-tensor-to-spirv="emulate-lt-32-bit-scalar-types=false"',
        '-convert-vector-to-gpu',
        '-convert-vector-to-gpu=use-nvgpu=true',
        '-convert-vector-to-llvm',
        '-convert-vector-to-llvm="enable-amx"',
        '-convert-vector-to-llvm="enable-arm-neon"',
        '-convert-vector-to-llvm="enable-arm-sve"',
        '-convert-vector-to-llvm="enable-x86vector"',
        '-convert-vector-to-llvm="force-32bit-vector-indices=1"',
        '-convert-vector-to-llvm="reassociate-fp-reductions"',
        #'-use-opaque-pointers',
        '-convert-vector-to-scf',
        '-convert-vector-to-scf=full-unroll=true',
        '-convert-vector-to-scf=lower-tensors=true',
        '-convert-vector-to-spirv',
        '-cse',
        '-decorate-spirv-composite-type-layout',
        '-drop-equivalent-buffer-results',
        # '-duplicate-function-elimination',   #Unknown command line argument '--duplicate-function-elimination'.  Try: 'mlir-opt --help'
        '-eliminate-empty-tensors',
        '-empty-tensor-to-alloc-tensor',
        # '-ensure-debug-info-scope-on-llvm-func',
        '-expand-strided-metadata',
        #'-finalize-memref-to-llvm',
        '-convert-memref-to-llvm="use-aligned-alloc=1"',
        '-convert-memref-to-llvm="use-generic-functions=1 use-aligned-alloc=1"',
        #'-use-opaque-pointers',
        '-finalizing-bufferize',
        '-fold-memref-alias-ops',
        '-func-bufferize',
        '-generate-runtime-verification',
        '-gpu-async-region',
        '-gpu-kernel-outlining',
        '-gpu-kernel-outlining=data-layout-str="#dlti.dl_spec<#dlti.dl_entry<index,32:i32>>"',
        '-gpu-launch-sink-index-computations',
        '-gpu-map-parallel-loops',
        '-gpu-to-llvm',
        '-gpu-to-llvm="gpu-binary-annotation=nvvm.cubin" ',
        '-gpu-to-llvm=use-bare-pointers-for-kernels=true',
        #'-use-opaque-pointers',
        '-inline',
        '-inline=default-pipeline="" ',
        '-inline="op-pipelines=func.func(canonicalize,cse)"',
        '-int-range-optimizations',
        '-launch-func-to-vulkan',
        #'-use-opaque-pointers',
        '-linalg-bufferize',
        '-linalg-detensorize',
        '-linalg-detensorize=aggressive-mode',
        '-linalg-fold-unit-extent-dims',
        '-linalg-fold-unit-extent-dims="use-rank-reducing-slices"',
        '-linalg-fold-unit-extent-dims=fold-one-trip-loops-only',
        '-linalg-fuse-elementwise-ops',
        '-linalg-generalize-named-ops',
        '-linalg-inline-scalar-operands',
        '-linalg-named-op-conversion',
        '-llvm-legalize-for-export',
        '-llvm-optimize-for-nvvm-target',
        '-llvm-request-c-wrappers',
        '-loop-invariant-code-motion',
        '-lower-affine',
        '-lower-host-to-llvm',
        #'-use-opaque-pointers',
        '-lower-vector-mask',
        '-map-memref-spirv-storage-class',
        '-map-memref-spirv-storage-class="client-api=opencl"',
        '-map-memref-spirv-storage-class="client-api=vulkan"',
        '-memref-emulate-wide-int',
        '-memref-emulate-wide-int="widest-int-supported=32"',
        '-memref-expand',
        '-normalize-memrefs',
        '-nvgpu-optimize-shared-memory',
        # '-one-shot-bufferize',
        # '-one-shot-bufferize="allow-return-allocs" ',
        # '-one-shot-bufferize="allow-unknown-ops" ',
        # '-one-shot-bufferize="analysis-fuzzer-seed=23" ',
        # '-one-shot-bufferize="analysis-heuristic=top-down" ',
        # '-one-shot-bufferize="bufferize-function-boundaries" ',
        # '-one-shot-bufferize="copy-before-write" ',
        # '-one-shot-bufferize="create-deallocs=0" ',
        # '-one-shot-bufferize="dialect-filter=scf,bufferization" ',
        # '-one-shot-bufferize="function-boundary-type-conversion=identity-layout-map" ',
        # '-one-shot-bufferize="must-infer-memory-space" ',
        # '-one-shot-bufferize="print-conflicts" ',
        # '-one-shot-bufferize="test-analysis-only" ',
        # '-one-shot-bufferize="unknown-type-conversion=identity-layout-map" ',
        '-outline-shape-computation',
        '-post-sparsification-rewrite',
        '-post-sparsification-rewrite="enable-convert=false"',
        '-post-sparsification-rewrite="enable-runtime-library=false "',
        '-post-sparsification-rewrite="enable-foreach=false"',
        '-sparse-compiler="enable-runtime-library=false" ',
        '-pre-sparsification-rewrite',
        '-mlir-print-ir-after-all',
        '-mlir-print-ir-before-all',
        '-print-op-stats',
        '-print-op-stats=json',
        '-promote-buffers-to-stack',
        '-promote-buffers-to-stack="max-alloc-size-in-bytes=64"',
        '-promote-buffers-to-stack="max-rank-of-allocated-memref=2"',
        '-reconcile-unrealized-casts',
        '-remove-shape-constraints',
        '-resolve-ranked-shaped-type-result-dims',
        '-resolve-shaped-type-result-dims',
        '-sccp',
        '-scf-bufferize',
        '-scf-for-loop-canonicalization',
        '-scf-for-loop-peeling',
        '-scf-for-loop-peeling=skip-partial=false',
        '-scf-for-loop-range-folding',
        '-scf-for-loop-specialization',
        '-scf-for-to-while',
        '-scf-parallel-loop-collapsing',
        '-scf-parallel-loop-collapsing=collapsed-indices-0=0,3',
        '-scf-parallel-loop-collapsing=collapsed-indices-1=1,4',
        '-scf-parallel-loop-collapsing=collapsed-indices-2=2',
        '-scf-parallel-loop-fusion',
        '-scf-parallel-loop-specialization',
        '-scf-parallel-loop-tiling',
        '-scf-parallel-loop-tiling=parallel-loop-tile-sizes=1,4',
        '-scf-parallel-loop-tiling=no-min-max-bounds=true',
        '-shape-bufferize',
        '-shape-to-shape-lowering',
        '-slice-analysis-test',
        '-snapshot-op-locations',
        '-snapshot-op-locations="tag=tagged"',
        '-sparse-buffer-rewrite',
        '-sparse-buffer-rewrite="enable-buffer-initialization=true"',
        '-sparse-storage-specifier-to-llvm',
        '-sparse-tensor-codegen="enable-buffer-initialization=true"',
        '-sparse-tensor-conversion',
        '-sparse-tensor-conversion="s2s-strategy=1"',
        '-sparse-vectorization=vl=8',
        '-sparse-vectorization="vl=16 enable-simd-index32=true"',
        '-sparse-vectorization=vl=16',
        '-sparse-vectorization="vl=4 enable-vla-vectorization=true"',
        '-sparsification',
        '-sparsification="parallelization-strategy=none "',
        '-sparsification="parallelization-strategy=dense-outer-loop "',
        '-sparsification="parallelization-strategy=any-storage-outer-loop "',
        '-sparsification="parallelization-strategy=dense-any-loop "',
        '-sparsification="parallelization-strategy=any-storage-any-loop "',
        '-spirv-canonicalize-gl',
        '-spirv-lower-abi-attrs',
        '-spirv-rewrite-inserts',
        '-spirv-unify-aliased-resource',
        '-spirv-update-vce',
        '-spirv-webgpu-prepare',
        '-strip-debuginfo',
        '-symbol-dce',
        '-symbol-privatize',
        '-symbol-privatize=exclude="aap "',
        '-tensor-bufferize',
        '-test-affine-data-copy',
        '-test-affine-data-copy="for-memref-region"',
        '-test-affine-data-copy="memref-filter"',
        '-test-affine-loop-unswitch',
        '-test-affine-parametric-tile',
        '-test-alias-analysis',
        '-test-alias-analysis-extending',
        '-test-alias-analysis-modref',
        '-test-arith-emulate-wide-int',
        '-test-arith-emulate-wide-int="function-prefix=emulate_me_ "',
        '-test-arith-emulate-wide-int="widest-int-supported=8 "',
        # '-test-block-is-in-loop',
        '-test-cf-assert',
        '-pass-pipeline=\"builtin.module(func.func(test-clone))\"',
        '-test-commutativity-utils',
        '-test-compose-subview',
        '-test-constant-fold',
        '-test-control-flow-sink',
        '-test-convert-call-op',
        '-test-create-vector-broadcast',
        '-test-data-layout-query',
        '-test-dead-code-analysis',
        #'-test-decompose-affine-ops',
        '-test-decompose-call-graph-types',
        '-test-derived-attr',
        '-test-diagnostic-filter',
        '-test-diagnostic-filter=filters=mysource1',
        '-test-dialect-conversion-pdll',
        '-test-dynamic-pipeline',
        '-test-dynamic-pipeline=op-name=inner_mod1',
        '-test-dynamic-pipeline=run-on-nested-operations=1',
        '-test-dynamic-pipeline=run-on-parent=1',
        # '-pass-pipeline=\"builtin.module(builtin.module(test-dynamic-pipeline{dynamic-pipeline=func.func(cse,canonicalize)}))\"',
        '-test-elements-attr-interface',
        '-test-expand-math',
        '-test-extract-fixed-outer-loops',
        '-test-extract-fixed-outer-loops="test-outer-loop-sizes=7,4"',
        '-test-foo-analysis',
        '-test-func-erase-arg',
        '-test-func-erase-result',
        '-test-func-insert-arg',
        '-test-func-insert-result',
        '-test-func-set-type',
        '-test-function-pass',
        '-test-generic-ir-block-visitors-interrupt',
        '-test-generic-ir-region-visitors-interrupt',
        '-test-generic-ir-visitors',
        '-test-generic-ir-visitors-interrupt',
        '-test-gpu-memory-promotion',
        '-test-gpu-rewrite',
        '-test-inline',
        '-test-int-range-inference',
        '-pass-pipeline=\"builtin.module(func.func(test-interface-pass))\"',
        # '-test-ir-visitors',
        '-test-last-modified',
        '-test-legalize-patterns',
        '-test-legalize-type-conversion',
        '-test-legalize-unknown-root-patterns',
        '-test-linalg-data-layout-propagation',
        '-test-linalg-decompose-ops',
        '-test-linalg-decompose-ops=remove-dead-args-and-results',
        '-test-linalg-elementwise-fusion-patterns',
        '-test-linalg-elementwise-fusion-patterns=collapse-dimensions-control=2,3',
        '-test-linalg-elementwise-fusion-patterns=control-fusion-by-expansion',
        '-test-linalg-elementwise-fusion-patterns=fuse-generic-ops',
        '-test-linalg-elementwise-fusion-patterns=fuse-generic-ops-control',
        # '-test-linalg-elementwise-fusion-patterns=fuse-multiuse-producer',   #<Pass-Options-Parser>: no such option
        '-test-linalg-elementwise-fusion-patterns=fuse-with-reshape-by-collapsing',
        '-test-linalg-elementwise-fusion-patterns=fuse-with-reshape-by-collapsing-control',
        '-test-linalg-elementwise-fusion-patterns=fuse-with-reshape-by-expansion',
        '-test-linalg-greedy-fusion',
        '-test-linalg-pad-fusion',
        '-test-linalg-transform-patterns',
        '-test-linalg-transform-patterns="skip-partial=false"',
        '-test-linalg-transform-patterns="test-bubble-up-extract-slice-op-pattern"',
        '-test-linalg-transform-patterns="test-erase-unnecessary-inputs "',
        '-test-linalg-transform-patterns="test-erase-unused-operands-and-results "',
        '-test-linalg-transform-patterns="test-generalize-pad-tensor "',
        '-test-linalg-transform-patterns="test-generalize-tensor-pack "',
        '-test-linalg-transform-patterns="test-generalize-tensor-unpack "',
        '-test-linalg-transform-patterns="test-linalg-to-vector-patterns "',
        '-test-linalg-transform-patterns="test-patterns "',
        '-test-linalg-transform-patterns="test-swap-extract-slice-with-fill-pattern "',
        '-test-linalg-transform-patterns="test-swap-subtensor-padtensor "',
        '-test-linalg-transform-patterns="test-transform-pad-tensor "',
        '-test-linalg-transform-patterns="test-vector-transfer-forwarding-patterns "',
        # '-test-linalg-transform-patterns="tile-size=32"',  #<Pass-Options-Parser>: no such option tile-size
        '-test-loop-fusion',
        '-test-loop-permutation',
        '-test-loop-permutation="permutation-map=0,1,2 "',
        '-test-loop-unrolling',
        '-test-loop-unrolling="annotate=true "',
        '-test-loop-unrolling="loop-depth=1 "',
        '-test-loop-unrolling="unroll-factor=2 "',
        '-test-loop-unrolling="unroll-up-to-factor "',
        '-test-mapping-to-processing-elements',
        '-pass-pipeline=\"builtin.module(func.func(test-match-reduction))\"',
        '-pass-pipeline=\"builtin.module(func.func(test-matchers))\"',
        '-test-math-algebraic-simplification',
        '-test-math-polynomial-approximation',
        '-test-math-polynomial-approximation="enable-avx2 "',
        '-test-memref-bound-check',
        #'-test-memref-dependence-check',
        '-test-memref-stride-calculation',
        '-test-merge-blocks',
        '-test-mlir-reducer',
        '-test-module-pass',
        '-test-multi-buffering',
        '-test-multi-buffering="multiplier=5 "',
        '-test-nvgpu-mmasync-f32-to-tf32-patterns',
        '-test-nvgpu-mmasync-f32-to-tf32-patterns="precision=32"',
        # '-test-opaque-loc',
        '-test-operations-equality',
        '-test-options-pass',
        '-test-options-pass=list=3',
        '-test-options-pass="string=value1 string=value2"',
        '-test-options-pass=string-list=a',
        # '-test-pass-crash',
        '-pass-pipeline=\"builtin.module(func.func(test-pass-create-invalid-ir))\"',
        '-pass-pipeline=\"builtin.module(func.func(test-pass-create-invalid-ir{emit-invalid-ir=true}))\"',
        '-pass-pipeline=\"builtin.module(func.func(test-pass-create-invalid-ir{signal-pass-failure=false}))\"',
        # '-test-pass-failure',
        '-pass-pipeline=\"builtin.module(func.func(test-pass-invalid-parent))\"',
        '-test-pattern-selective-replacement',
        '-test-patterns',
        '-test-patterns="max-iterations=1 "',
        '-test-patterns="top-down=true "',
        '-test-pdl-bytecode-pass',
        '-test-pdll-pass',
        '-test-print-callgraph',
        '-test-print-defuse',
        '-test-print-dominance',
        '-test-print-invalid',
        '-test-print-liveness',
        '-test-print-nesting',
        '-test-print-shape-mapping',
        '-test-print-topological-sort',
        '-test-recursive-types',
        '-test-remapped-value',
        '-test-return-type',
        '-test-rewrite-dynamic-op',
        '-test-scalar-vector-transfer-lowering',
        '-test-scf-for-utils',
        '-test-scf-for-utils=test-replace-with-new-yields',
        '-test-scf-if-utils',
        '-test-scf-pipelining',
        '-test-scf-pipelining=annotate',
        '-test-scf-pipelining=no-epilogue-peeling',
        #'-test-scf-while-op-builder',
        '-test-shape-function-report',
        '-test-side-effects',
        '-test-spirv-entry-point-abi',
        '-test-spirv-entry-point-abi="workgroup-size=32 "',
        '-test-spirv-module-combiner',
        '-test-spirv-op-availability',
        '-test-spirv-target-env',
        '-test-stats-pass',
        '-test-strict-pattern-driver',
        '-test-strict-pattern-driver="strictness=AnyOp "',
        '-test-strict-pattern-driver="strictness=ExistingAndNewOps "',
        '-test-strict-pattern-driver="strictness=ExistingOps "',
        '-test-symbol-rauw',
        '-test-symbol-uses',
        '-test-take-body',
        '-test-target-materialization-with-no-uses',
        '-test-tensor-copy-insertion',
        '-test-tensor-copy-insertion="allow-return-allocs "',
        '-test-tensor-copy-insertion="bufferize-function-boundaries "',
        '-test-tensor-copy-insertion="create-deallocs=0 "',
        '-test-tensor-copy-insertion="must-infer-memory-space "',
        '-test-tensor-transform-patterns',
        '-test-tensor-transform-patterns="test-empty-op-folding "',
        '-test-tensor-transform-patterns="test-fold-consecutive-insert-extract-slice "',
        '-test-tensor-transform-patterns="test-fold-constant-extract-slice "',
        '-test-tensor-transform-patterns="test-fold-into-pack-and-unpack "',
        '-test-tensor-transform-patterns="test-reassociative-reshape-folding "',
        '-test-tensor-transform-patterns="test-rewrite-extract-slice-from-collapse-shape "',
        '-test-tensor-transform-patterns="test-simplify-pack-patterns "',
        '-test-tensor-transform-patterns="test-split-padding-patterns "',
        '-test-tensor-transform-patterns=use-foreach',
        '-test-tiling-interface',
        '-test-tiling-interface="lower-to-scalar-using-scf-for "',
        '-test-tiling-interface="tile-consumer-and-fuse-producer-using-scf-for "',
        '-test-tiling-interface="tile-consumer-fuse-and-yield-producer-using-scf-for "',
        '-test-tiling-interface="tile-using-scf-for "',
        '-test-topological-sort-analysis',
        '-test-trait-folder',
        '-test-transform-dialect-erase-schedule',
        '-test-transform-dialect-interpreter',  #其余参数设置无官方用例
        '-test-transform-dialect-interpreter="enable-expensive-checks=1 "',
        '-test-type-interfaces',
        '-test-vector-contraction-lowering',
        '-test-vector-contraction-lowering="vector-filter-outerproduct=1 "',
        '-test-vector-contraction-lowering="vector-lower-matrix-intrinsics=1 "',
        '-test-vector-contraction-lowering="vector-outerproduct=1 "',
        '-test-vector-contraction-lowering="vector-parallel-arith=1 "',
        #'-test-vector-contraction-prepare-for-mmt-lowering',
        '-test-vector-extract-strided-slice-lowering',
        '-test-vector-multi-reduction-lowering-patterns',
        '-test-vector-multi-reduction-lowering-patterns="use-outer-reductions"',
        '-test-vector-reduction-to-contract-patterns',
        # '-test-vector-reduction-to-spirv-dot-prod', Unknown command line argument 
        '-test-vector-scan-lowering',
        '-test-vector-to-vector-lowering',
        '-test-vector-to-vector-lowering="unroll"',
        '-test-vector-transfer-collapse-inner-most-dims',
        '-test-vector-transfer-drop-unit-dims-patterns',
        '-test-vector-transfer-flatten-patterns',
        '-test-vector-transfer-full-partial-split',
        '-test-vector-transfer-full-partial-split=use-memref-copy',
        '-test-vector-transfer-lowering-patterns',
        '-test-vector-transfer-unrolling-patterns',
        '-test-vector-transfer-unrolling-patterns=reverse-unroll-order',
        '-test-vector-transferop-opt',
        '-test-vector-transpose-lowering',
        '-test-vector-transpose-lowering=avx2=1',
        '-test-vector-transpose-lowering=eltwise=1',
        '-test-vector-transpose-lowering=flat=1',
        '-test-vector-transpose-lowering=shuffle=1',
        '-test-vector-unrolling-patterns',
        '-test-vector-unrolling-patterns="unroll-based-on-type" ',
        '-test-vector-unrolling-patterns="unroll-order=2,0,1" ',
        '-test-vector-warp-distribute',
        '-test-vector-warp-distribute=propagate-distribution',
        '-test-vector-warp-distribute=distribute-transfer-write',
        '-test-vector-warp-distribute=hoist-uniform',
        '-test-vector-warp-distribute=rewrite-warp-ops-to-scf-if',
        '-test-written-to',
        '-topological-sort',
        '-tosa-infer-shapes',
        '-tosa-layerwise-constant-fold',
        '-tosa-make-broadcastable',
        '-tosa-optional-decompositions',
        '-tosa-test-quant-utils',
        '-tosa-to-arith',
        '-tosa-to-arith="include-apply-rescale=true"',
        '-tosa-to-arith="use-32-bit=true"',
        '-pass-pipeline=\"builtin.module(func.func(tosa-to-linalg))\"',
        '-pass-pipeline=\"builtin.module(func.func(tosa-to-linalg-named,tosa-to-linalg))\"',
        '-tosa-to-scf',
        '-tosa-to-tensor',
        '-tosa-validate',  #参数设置无官方用例
        '-transform-dialect-check-uses',
        '-vector-bufferize',
        # '-view-op-graph="max-label-len=8 "',
        # '-view-op-graph="print-attrs=true "',
        # '-view-op-graph="print-control-flow-edges=true "',
        # '-view-op-graph="print-data-flow-edges=true "',
        # '-view-op-graph="print-result-types=true "',
        # '-view-op-graph="print-data-flow-edges=false print-control-flow-edges=true"',

        # ===============Pass Pipelines:
        '-sparse-compiler',
        '-sparse-compiler="enable-amx=true "',
        '-sparse-compiler="enable-arm-neon=true "',
        '-sparse-compiler="enable-arm-sve=true "',
        '-sparse-compiler="enable-buffer-initialization=true "',
        '-sparse-compiler="enable-index-optimizations=true "',
        '-sparse-compiler="enable-runtime-library=true "',
        '-sparse-compiler="enable-x86vector=true "',
        '-sparse-compiler="parallelization-strategy=none "',
        '-sparse-compiler="parallelization-strategy=dense-outer-loop "',
        '-sparse-compiler="parallelization-strategy=any-storage-outer-loop "',
        '-sparse-compiler="parallelization-strategy=dense-any-loop "',
        '-sparse-compiler="parallelization-strategy=any-storage-any-loop "',
        '-sparse-compiler="reassociate-fp-reductions=true "',
        '-sparse-compiler="s2s-strategy=2 "',
        '-sparse-compiler="test-bufferization-analysis-only "',
        '-sparse-compiler="vl=8 "',
        '-test-lower-to-llvm',
        '-test-lower-to-llvm=reassociate-fp-reductions=true',
        # '-test-options-pass-pipeline',
        # '-test-options-pass-pipeline="list=1"',
        # '-test-options-pass-pipeline="string-list=a,b "',
        '-test-pm-nested-pipeline',
        '-test-textual-pm-nested-pipeline',
        '-verify-diagnostics',
        '-verify-each=true',
        '-verify-each=false',
        # '-help',
        # '-help-list',
        # '-version',
        '-affine-super-vectorizer-test -backward-slicing=true',
        '-affine-super-vectorizer-test -compose-maps',
        '-affine-super-vectorizer-test -forward-slicing=true',
        '-affine-super-vectorizer-test -slicing=true',
        '-affine-super-vectorizer-test -vectorize-affine-loop-nest',
        '-test-loop-fusion-dependence-check',
        '-test-loop-fusion-slice-computation',
        '-test-loop-fusion-transformation'
    ]

class OptimizePass:
    all =[
        # ==================== General options:
        '-allow-unregistered-dialect',
        '-disable-i2p-p2i-opt',
        # '-dump-pass-pipeline',
        # '-emit-bytecode',   输出成二进制
        '-generate-merged-base-profiles',
        '-mlir-disable-threading',
        '-mlir-pass-pipeline-local-reproducer',
        '-mlir-pass-statistics',
        '-mlir-pass-statistics-display=list',
        '-mlir-pass-statistics-display=pipeline',
        '-mlir-pretty-debuginfo',
        '-mlir-print-debug-counter',
        '-mlir-print-debuginfo',
        '-mlir-print-elementsattrs-with-hex-if-larger=1',
        '-mlir-print-ir-after=cse',
        '-mlir-print-ir-after-all',
        '-mlir-print-ir-after-change',
        '-mlir-print-ir-after-failure',
        '-mlir-print-ir-before=cse',
        '-mlir-print-ir-before-all',
        '-mlir-print-ir-module-scope',
        '-mlir-print-local-scope',
        '-mlir-print-op-on-diagnostic',
        # '-mlir-print-stacktrace-on-diagnostic',
        # '-mlir-print-value-users',
        # '-mlir-timing',
        # '-mlir-timing-display=tree',
        # '-mlir-timing-display=list'
        '-no-implicit-module',
        '-opaque-pointers',
        # '-show-dialects',
        '-split-input-file',
        '-test-legalize-mode=analysis',
        '-test-legalize-mode=full',
        '-test-legalize-mode=partial',

        # ================= Compiler passes to run,Passes:
        '-affine-data-copy-generate',
        '-affine-data-copy-generate="generate-dma=false fast-mem-space=0 fast-mem-capacity=1"',
        '-affine-data-copy-generate="generate-dma=false fast-mem-space=0 skip-non-unit-stride-loops" ',
        '-affine-data-copy-generate="generate-dma fast-mem-space=2 skip-non-unit-stride-loops"',
        '-affine-data-copy-generate="generate-dma fast-mem-capacity=16 fast-mem-space=2"',
        '-affine-expand-index-ops',
        '-affine-loop-coalescing',
        '-affine-loop-fusion',
        '-affine-loop-fusion=fusion-maximal',
        '-affine-loop-fusion=mode=producer',
        '-affine-loop-fusion=mode=sibling',
        '-affine-loop-fusion=mode=greedy',
        '-affine-loop-invariant-code-motion',
        '-affine-loop-normalize',
        '-affine-loop-normalize="promote-single-iter=1"',
        '-affine-loop-tile',
        '-affine-loop-tile="tile-size=32" ',
        '-affine-loop-tile="cache-size=512"',
        '-affine-loop-tile="tile-size=32 separate"',
        '-affine-loop-unroll',
        '-affine-loop-unroll="unroll-factor=5 cleanup-unroll=true" ',
        '-affine-loop-unroll="unroll-full"',
        '-affine-loop-unroll="unroll-factor=5"',
        '-affine-loop-unroll="unroll-factor=6 unroll-up-to-factor=true"',
        '-affine-loop-unroll-jam',
        '-affine-loop-unroll-jam="unroll-jam-factor=2" ',
        '-affine-parallelize',
        '-affine-parallelize=max-nested=1',
        '-affine-parallelize=parallel-reductions=1',
        '-affine-pipeline-data-transfer',
        '-affine-scalrep',
        '-affine-simplify-structures',
        '-affine-super-vectorize',
        '-affine-super-vectorize="virtual-vector-size=128 test-fastest-varying=0"  ',
        '-affine-super-vectorize="virtual-vector-size=4,8"',
        '-affine-super-vectorize="vectorize-reductions=true"',
        '-affine-super-vectorizer-test',
        '-arith-bufferize',
        '-arith-bufferize=alignment=64',
        '-arith-emulate-wide-int',
        '-arith-emulate-wide-int="widest-int-supported=32"',
        '-arith-expand',
        '-arith-unsigned-when-equivalent',
        '-arm-neon-2d-to-intr',
        '-async-func-to-async-runtime',
        '-async-parallel-for',
        '-async-parallel-for=async-dispatch=true',
        '-async-parallel-for="num-workers=20"',                    
        '-async-parallel-for="min-task-size=1"',
        '-async-runtime-policy-based-ref-counting',
        '-async-runtime-ref-counting',
        '-async-runtime-ref-counting-opt',
        '-async-to-async-runtime',
        '-buffer-deallocation',
        '-buffer-hoisting',
        '-buffer-loop-hoisting',
        '-buffer-results-to-out-params',
        '-bufferization-bufferize',
        '-canonicalize',
        '-canonicalize="test-convergence"',
        '-canonicalize="top-down=0"',
        '-canonicalize=disable-patterns=TestRemoveOpWithInnerOps',
        '-canonicalize=enable-patterns=TestRemoveOpWithInnerOps',
        '-canonicalize=region-simplify=false',
        # '-pipeline-pipeline="builtin.module(func.func(cse,canonicalize{max-iterations=1 max-num-rewrites=-1 region-simplify=false top-down=false}))"',
        '-control-flow-sink',
        '-cse',
        '-decorate-spirv-composite-type-layout',
        '-drop-equivalent-buffer-results',
        # '-duplicate-function-elimination',   #Unknown command line argument '--duplicate-function-elimination'.  Try: 'mlir-opt --help'
        '-eliminate-empty-tensors',
        '-empty-tensor-to-alloc-tensor',
        # '-ensure-debug-info-scope-on-llvm-func',
        '-expand-strided-metadata',
        #'-finalize-memref-to-llvm',
        #'-use-opaque-pointers',
        '-finalizing-bufferize',
        '-fold-memref-alias-ops',
        '-func-bufferize',
        '-generate-runtime-verification',
        '-gpu-async-region',
        '-gpu-kernel-outlining',
        '-gpu-kernel-outlining=data-layout-str="#dlti.dl_spec<#dlti.dl_entry<index,32:i32>>"',
        '-gpu-launch-sink-index-computations',
        '-gpu-map-parallel-loops',
        #'-use-opaque-pointers',
        '-inline',
        '-inline=default-pipeline="" ',
        '-inline="op-pipelines=func.func(canonicalize,cse)"',
        '-int-range-optimizations',
        #'-use-opaque-pointers',
        '-linalg-bufferize',
        '-linalg-detensorize',
        '-linalg-detensorize=aggressive-mode',
        '-linalg-fold-unit-extent-dims',
        '-linalg-fold-unit-extent-dims="use-rank-reducing-slices"',
        '-linalg-fold-unit-extent-dims=fold-one-trip-loops-only',
        '-linalg-fuse-elementwise-ops',
        '-linalg-generalize-named-ops',
        '-linalg-inline-scalar-operands',
        '-linalg-named-op-conversion',
        '-llvm-legalize-for-export',
        '-llvm-optimize-for-nvvm-target',
        '-llvm-request-c-wrappers',
        '-loop-invariant-code-motion',
        #'-use-opaque-pointers',
        '-lower-vector-mask',
        '-map-memref-spirv-storage-class',
        '-map-memref-spirv-storage-class="client-api=opencl"',
        '-map-memref-spirv-storage-class="client-api=vulkan"',
        '-memref-emulate-wide-int',
        '-memref-emulate-wide-int="widest-int-supported=32"',
        '-memref-expand',
        '-normalize-memrefs',
        '-nvgpu-optimize-shared-memory',
        # '-one-shot-bufferize',
        # '-one-shot-bufferize="allow-return-allocs" ',
        # '-one-shot-bufferize="allow-unknown-ops" ',
        # '-one-shot-bufferize="analysis-fuzzer-seed=23" ',
        # '-one-shot-bufferize="analysis-heuristic=top-down" ',
        # '-one-shot-bufferize="bufferize-function-boundaries" ',
        # '-one-shot-bufferize="copy-before-write" ',
        # '-one-shot-bufferize="create-deallocs=0" ',
        # '-one-shot-bufferize="dialect-filter=scf,bufferization" ',
        # '-one-shot-bufferize="function-boundary-type-conversion=identity-layout-map" ',
        # '-one-shot-bufferize="must-infer-memory-space" ',
        # '-one-shot-bufferize="print-conflicts" ',
        # '-one-shot-bufferize="test-analysis-only" ',
        # '-one-shot-bufferize="unknown-type-conversion=identity-layout-map" ',
        '-outline-shape-computation',
        '-post-sparsification-rewrite',
        '-post-sparsification-rewrite="enable-convert=false"',
        '-post-sparsification-rewrite="enable-runtime-library=false "',
        '-post-sparsification-rewrite="enable-foreach=false"',
        '-sparse-compiler="enable-runtime-library=false" ',
        '-pre-sparsification-rewrite',
        '-mlir-print-ir-after-all',
        '-mlir-print-ir-before-all',
        '-print-op-stats',
        '-print-op-stats=json',
        '-promote-buffers-to-stack',
        '-promote-buffers-to-stack="max-alloc-size-in-bytes=64"',
        '-promote-buffers-to-stack="max-rank-of-allocated-memref=2"',
        '-reconcile-unrealized-casts',
        '-remove-shape-constraints',
        '-resolve-ranked-shaped-type-result-dims',
        '-resolve-shaped-type-result-dims',
        '-sccp',
        '-scf-bufferize',
        '-scf-for-loop-canonicalization',
        '-scf-for-loop-peeling',
        '-scf-for-loop-peeling=skip-partial=false',
        '-scf-for-loop-range-folding',
        '-scf-for-loop-specialization',
        '-scf-for-to-while',
        '-scf-parallel-loop-collapsing',
        '-scf-parallel-loop-collapsing=collapsed-indices-0=0,3',
        '-scf-parallel-loop-collapsing=collapsed-indices-1=1,4',
        '-scf-parallel-loop-collapsing=collapsed-indices-2=2',
        '-scf-parallel-loop-fusion',
        '-scf-parallel-loop-specialization',
        '-scf-parallel-loop-tiling',
        '-scf-parallel-loop-tiling=parallel-loop-tile-sizes=1,4',
        '-scf-parallel-loop-tiling=no-min-max-bounds=true',
        '-shape-bufferize',
        '-shape-to-shape-lowering',
        '-slice-analysis-test',
        '-snapshot-op-locations',
        '-snapshot-op-locations="tag=tagged"',
        '-sparse-buffer-rewrite',
        '-sparse-buffer-rewrite="enable-buffer-initialization=true"',
        '-sparse-storage-specifier-to-llvm',
        '-sparse-tensor-codegen="enable-buffer-initialization=true"',
        '-sparse-tensor-conversion',
        '-sparse-tensor-conversion="s2s-strategy=1"',
        '-sparse-vectorization=vl=8',
        '-sparse-vectorization="vl=16 enable-simd-index32=true"',
        '-sparse-vectorization=vl=16',
        '-sparse-vectorization="vl=4 enable-vla-vectorization=true"',
        '-sparsification',
        '-sparsification="parallelization-strategy=none "',
        '-sparsification="parallelization-strategy=dense-outer-loop "',
        '-sparsification="parallelization-strategy=any-storage-outer-loop "',
        '-sparsification="parallelization-strategy=dense-any-loop "',
        '-sparsification="parallelization-strategy=any-storage-any-loop "',
        '-spirv-canonicalize-gl',
        '-spirv-lower-abi-attrs',
        '-spirv-rewrite-inserts',
        '-spirv-unify-aliased-resource',
        '-spirv-update-vce',
        '-spirv-webgpu-prepare',
        '-strip-debuginfo',
        '-symbol-dce',
        '-symbol-privatize',
        '-symbol-privatize=exclude="aap "',
        '-tensor-bufferize',
        '-test-affine-data-copy',
        '-test-affine-data-copy="for-memref-region"',
        '-test-affine-data-copy="memref-filter"',
        '-test-affine-loop-unswitch',
        '-test-affine-parametric-tile',
        '-test-alias-analysis',
        '-test-alias-analysis-extending',
        '-test-alias-analysis-modref',
        '-test-arith-emulate-wide-int',
        '-test-arith-emulate-wide-int="function-prefix=emulate_me_ "',
        '-test-arith-emulate-wide-int="widest-int-supported=8 "',
        # '-test-block-is-in-loop',
        '-test-cf-assert',
        '-pass-pipeline=\"builtin.module(func.func(test-clone))\"',
        '-test-commutativity-utils',
        '-test-compose-subview',
        '-test-constant-fold',
        '-test-control-flow-sink',
        '-test-convert-call-op',
        '-test-create-vector-broadcast',
        '-test-data-layout-query',
        '-test-dead-code-analysis',
        #'-test-decompose-affine-ops',
        '-test-decompose-call-graph-types',
        '-test-derived-attr',
        '-test-diagnostic-filter',
        '-test-diagnostic-filter=filters=mysource1',
        '-test-dialect-conversion-pdll',
        '-test-dynamic-pipeline',
        '-test-dynamic-pipeline=op-name=inner_mod1',
        '-test-dynamic-pipeline=run-on-nested-operations=1',
        '-test-dynamic-pipeline=run-on-parent=1',
        # '-pass-pipeline=\"builtin.module(builtin.module(test-dynamic-pipeline{dynamic-pipeline=func.func(cse,canonicalize)}))\"',
        '-test-elements-attr-interface',
        '-test-expand-math',
        '-test-extract-fixed-outer-loops',
        '-test-extract-fixed-outer-loops="test-outer-loop-sizes=7,4"',
        '-test-foo-analysis',
        '-test-func-erase-arg',
        '-test-func-erase-result',
        '-test-func-insert-arg',
        '-test-func-insert-result',
        '-test-func-set-type',
        '-test-function-pass',
        '-test-generic-ir-block-visitors-interrupt',
        '-test-generic-ir-region-visitors-interrupt',
        '-test-generic-ir-visitors',
        '-test-generic-ir-visitors-interrupt',
        '-test-gpu-memory-promotion',
        '-test-gpu-rewrite',
        '-test-inline',
        '-test-int-range-inference',
        '-pass-pipeline=\"builtin.module(func.func(test-interface-pass))\"',
        # '-test-ir-visitors',
        '-test-last-modified',
        '-test-legalize-patterns',
        '-test-legalize-type-conversion',
        '-test-legalize-unknown-root-patterns',
        '-test-linalg-data-layout-propagation',
        '-test-linalg-decompose-ops',
        '-test-linalg-decompose-ops=remove-dead-args-and-results',
        '-test-linalg-elementwise-fusion-patterns',
        '-test-linalg-elementwise-fusion-patterns=collapse-dimensions-control=2,3',
        '-test-linalg-elementwise-fusion-patterns=control-fusion-by-expansion',
        '-test-linalg-elementwise-fusion-patterns=fuse-generic-ops',
        '-test-linalg-elementwise-fusion-patterns=fuse-generic-ops-control',
        # '-test-linalg-elementwise-fusion-patterns=fuse-multiuse-producer',   #<Pass-Options-Parser>: no such option
        '-test-linalg-elementwise-fusion-patterns=fuse-with-reshape-by-collapsing',
        '-test-linalg-elementwise-fusion-patterns=fuse-with-reshape-by-collapsing-control',
        '-test-linalg-elementwise-fusion-patterns=fuse-with-reshape-by-expansion',
        '-test-linalg-greedy-fusion',
        '-test-linalg-pad-fusion',
        '-test-linalg-transform-patterns',
        '-test-linalg-transform-patterns="skip-partial=false"',
        '-test-linalg-transform-patterns="test-bubble-up-extract-slice-op-pattern"',
        '-test-linalg-transform-patterns="test-erase-unnecessary-inputs "',
        '-test-linalg-transform-patterns="test-erase-unused-operands-and-results "',
        '-test-linalg-transform-patterns="test-generalize-pad-tensor "',
        '-test-linalg-transform-patterns="test-generalize-tensor-pack "',
        '-test-linalg-transform-patterns="test-generalize-tensor-unpack "',
        '-test-linalg-transform-patterns="test-linalg-to-vector-patterns "',
        '-test-linalg-transform-patterns="test-patterns "',
        '-test-linalg-transform-patterns="test-swap-extract-slice-with-fill-pattern "',
        '-test-linalg-transform-patterns="test-swap-subtensor-padtensor "',
        '-test-linalg-transform-patterns="test-transform-pad-tensor "',
        '-test-linalg-transform-patterns="test-vector-transfer-forwarding-patterns "',
        # '-test-linalg-transform-patterns="tile-size=32"',  #<Pass-Options-Parser>: no such option tile-size
        '-test-loop-fusion',
        '-test-loop-permutation',
        '-test-loop-permutation="permutation-map=0,1,2 "',
        '-test-loop-unrolling',
        '-test-loop-unrolling="annotate=true "',
        '-test-loop-unrolling="loop-depth=1 "',
        '-test-loop-unrolling="unroll-factor=2 "',
        '-test-loop-unrolling="unroll-up-to-factor "',
        '-test-mapping-to-processing-elements',
        '-pass-pipeline=\"builtin.module(func.func(test-match-reduction))\"',
        '-pass-pipeline=\"builtin.module(func.func(test-matchers))\"',
        '-test-math-algebraic-simplification',
        '-test-math-polynomial-approximation',
        '-test-math-polynomial-approximation="enable-avx2 "',
        '-test-memref-bound-check',
        #'-test-memref-dependence-check',
        '-test-memref-stride-calculation',
        '-test-merge-blocks',
        '-test-mlir-reducer',
        '-test-module-pass',
        '-test-multi-buffering',
        '-test-multi-buffering="multiplier=5 "',
        '-test-nvgpu-mmasync-f32-to-tf32-patterns',
        '-test-nvgpu-mmasync-f32-to-tf32-patterns="precision=32"',
        # '-test-opaque-loc',
        '-test-operations-equality',
        '-test-options-pass',
        '-test-options-pass=list=3',
        '-test-options-pass="string=value1 string=value2"',
        '-test-options-pass=string-list=a',
        # '-test-pass-crash',
        '-pass-pipeline=\"builtin.module(func.func(test-pass-create-invalid-ir))\"',
        '-pass-pipeline=\"builtin.module(func.func(test-pass-create-invalid-ir{emit-invalid-ir=true}))\"',
        '-pass-pipeline=\"builtin.module(func.func(test-pass-create-invalid-ir{signal-pass-failure=false}))\"',
        # '-test-pass-failure',
        '-pass-pipeline=\"builtin.module(func.func(test-pass-invalid-parent))\"',
        '-test-pattern-selective-replacement',
        '-test-patterns',
        '-test-patterns="max-iterations=1 "',
        '-test-patterns="top-down=true "',
        '-test-pdl-bytecode-pass',
        '-test-pdll-pass',
        '-test-print-callgraph',
        '-test-print-defuse',
        '-test-print-dominance',
        '-test-print-invalid',
        '-test-print-liveness',
        '-test-print-nesting',
        '-test-print-shape-mapping',
        '-test-print-topological-sort',
        '-test-recursive-types',
        '-test-remapped-value',
        '-test-return-type',
        '-test-rewrite-dynamic-op',
        '-test-scalar-vector-transfer-lowering',
        '-test-scf-for-utils',
        '-test-scf-for-utils=test-replace-with-new-yields',
        '-test-scf-if-utils',
        '-test-scf-pipelining',
        '-test-scf-pipelining=annotate',
        '-test-scf-pipelining=no-epilogue-peeling',
        #'-test-scf-while-op-builder',
        '-test-shape-function-report',
        '-test-side-effects',
        '-test-spirv-entry-point-abi',
        '-test-spirv-entry-point-abi="workgroup-size=32 "',
        '-test-spirv-module-combiner',
        '-test-spirv-op-availability',
        '-test-spirv-target-env',
        '-test-stats-pass',
        '-test-strict-pattern-driver',
        '-test-strict-pattern-driver="strictness=AnyOp "',
        '-test-strict-pattern-driver="strictness=ExistingAndNewOps "',
        '-test-strict-pattern-driver="strictness=ExistingOps "',
        '-test-symbol-rauw',
        '-test-symbol-uses',
        '-test-take-body',
        '-test-target-materialization-with-no-uses',
        '-test-tensor-copy-insertion',
        '-test-tensor-copy-insertion="allow-return-allocs "',
        '-test-tensor-copy-insertion="bufferize-function-boundaries "',
        '-test-tensor-copy-insertion="create-deallocs=0 "',
        '-test-tensor-copy-insertion="must-infer-memory-space "',
        '-test-tensor-transform-patterns',
        '-test-tensor-transform-patterns="test-empty-op-folding "',
        '-test-tensor-transform-patterns="test-fold-consecutive-insert-extract-slice "',
        '-test-tensor-transform-patterns="test-fold-constant-extract-slice "',
        '-test-tensor-transform-patterns="test-fold-into-pack-and-unpack "',
        '-test-tensor-transform-patterns="test-reassociative-reshape-folding "',
        '-test-tensor-transform-patterns="test-rewrite-extract-slice-from-collapse-shape "',
        '-test-tensor-transform-patterns="test-simplify-pack-patterns "',
        '-test-tensor-transform-patterns="test-split-padding-patterns "',
        '-test-tensor-transform-patterns=use-foreach',
        '-test-tiling-interface',
        '-test-tiling-interface="lower-to-scalar-using-scf-for "',
        '-test-tiling-interface="tile-consumer-and-fuse-producer-using-scf-for "',
        '-test-tiling-interface="tile-consumer-fuse-and-yield-producer-using-scf-for "',
        '-test-tiling-interface="tile-using-scf-for "',
        '-test-topological-sort-analysis',
        '-test-trait-folder',
        '-test-transform-dialect-erase-schedule',
        '-test-transform-dialect-interpreter',  #其余参数设置无官方用例
        '-test-transform-dialect-interpreter="enable-expensive-checks=1 "',
        '-test-type-interfaces',
        '-test-vector-contraction-lowering',
        '-test-vector-contraction-lowering="vector-filter-outerproduct=1 "',
        '-test-vector-contraction-lowering="vector-lower-matrix-intrinsics=1 "',
        '-test-vector-contraction-lowering="vector-outerproduct=1 "',
        '-test-vector-contraction-lowering="vector-parallel-arith=1 "',
        #'-test-vector-contraction-prepare-for-mmt-lowering',
        '-test-vector-extract-strided-slice-lowering',
        '-test-vector-multi-reduction-lowering-patterns',
        '-test-vector-multi-reduction-lowering-patterns="use-outer-reductions"',
        '-test-vector-reduction-to-contract-patterns',
        # '-test-vector-reduction-to-spirv-dot-prod', Unknown command line argument 
        '-test-vector-scan-lowering',
        '-test-vector-to-vector-lowering',
        '-test-vector-to-vector-lowering="unroll"',
        '-test-vector-transfer-collapse-inner-most-dims',
        '-test-vector-transfer-drop-unit-dims-patterns',
        '-test-vector-transfer-flatten-patterns',
        '-test-vector-transfer-full-partial-split',
        '-test-vector-transfer-full-partial-split=use-memref-copy',
        '-test-vector-transfer-lowering-patterns',
        '-test-vector-transfer-unrolling-patterns',
        '-test-vector-transfer-unrolling-patterns=reverse-unroll-order',
        '-test-vector-transferop-opt',
        '-test-vector-transpose-lowering',
        '-test-vector-transpose-lowering=avx2=1',
        '-test-vector-transpose-lowering=eltwise=1',
        '-test-vector-transpose-lowering=flat=1',
        '-test-vector-transpose-lowering=shuffle=1',
        '-test-vector-unrolling-patterns',
        '-test-vector-unrolling-patterns="unroll-based-on-type" ',
        '-test-vector-unrolling-patterns="unroll-order=2,0,1" ',
        '-test-vector-warp-distribute',
        '-test-vector-warp-distribute=propagate-distribution',
        '-test-vector-warp-distribute=distribute-transfer-write',
        '-test-vector-warp-distribute=hoist-uniform',
        '-test-vector-warp-distribute=rewrite-warp-ops-to-scf-if',
        '-test-written-to',
        '-topological-sort',
        '-tosa-infer-shapes',
        '-tosa-layerwise-constant-fold',
        '-tosa-make-broadcastable',
        '-tosa-optional-decompositions',
        '-tosa-test-quant-utils',
        '-tosa-validate',  #参数设置无官方用例
        '-transform-dialect-check-uses',
        '-vector-bufferize',
        # '-view-op-graph="max-label-len=8 "',
        # '-view-op-graph="print-attrs=true "',
        # '-view-op-graph="print-control-flow-edges=true "',
        # '-view-op-graph="print-data-flow-edges=true "',
        # '-view-op-graph="print-result-types=true "',
        # '-view-op-graph="print-data-flow-edges=false print-control-flow-edges=true"',

        # ===============Pass Pipelines:
        '-sparse-compiler',
        '-sparse-compiler="enable-amx=true "',
        '-sparse-compiler="enable-arm-neon=true "',
        '-sparse-compiler="enable-arm-sve=true "',
        '-sparse-compiler="enable-buffer-initialization=true "',
        '-sparse-compiler="enable-index-optimizations=true "',
        '-sparse-compiler="enable-runtime-library=true "',
        '-sparse-compiler="enable-x86vector=true "',
        '-sparse-compiler="parallelization-strategy=none "',
        '-sparse-compiler="parallelization-strategy=dense-outer-loop "',
        '-sparse-compiler="parallelization-strategy=any-storage-outer-loop "',
        '-sparse-compiler="parallelization-strategy=dense-any-loop "',
        '-sparse-compiler="parallelization-strategy=any-storage-any-loop "',
        '-sparse-compiler="reassociate-fp-reductions=true "',
        '-sparse-compiler="s2s-strategy=2 "',
        '-sparse-compiler="test-bufferization-analysis-only "',
        '-sparse-compiler="vl=8 "',
        '-test-lower-to-llvm',
        '-test-lower-to-llvm=reassociate-fp-reductions=true',
        # '-test-options-pass-pipeline',
        # '-test-options-pass-pipeline="list=1"',
        # '-test-options-pass-pipeline="string-list=a,b "',
        '-test-pm-nested-pipeline',
        '-test-textual-pm-nested-pipeline',
        '-verify-diagnostics',
        '-verify-each=true',
        '-verify-each=false',
        # '-help',
        # '-help-list',
        # '-version',
        '-affine-super-vectorizer-test -backward-slicing=true',
        '-affine-super-vectorizer-test -compose-maps',
        '-affine-super-vectorizer-test -forward-slicing=true',
        '-affine-super-vectorizer-test -slicing=true',
        '-affine-super-vectorizer-test -vectorize-affine-loop-nest',
        '-test-loop-fusion-dependence-check',
        '-test-loop-fusion-slice-computation',
        '-test-loop-fusion-transformation'
    ]

class EmiPassClass:
    all_emi_pass = [
        # '-ES',
        # '-BCF',
        # '-Mix'
        'Rep'
        # '-NR',
        # '-TG'
    ]


if __name__ == '__main__':
    raw_list = OptimizePass.scf_pass
    rsa = range(len(raw_list))
    print(rsa)
    for j in range(100):
        pass_list = raw_list.copy()
        insert_point_count = random.randint(1, len(pass_list))
        rs = random.sample(range(len(pass_list)+1),insert_point_count)
        for i in rs:
            pass_list.insert(i,'|')
        print(insert_point_count)
        print(rs)
        print(pass_list)



# class LowerPass:
#     all = [
#         '-tosa-infer-shapes',
#         '-tosa-to-arith',
#         '-pass-pipeline="func.func(tosa-to-linalg)"',
#         '-func-bufferize',
#         '-linalg-bufferize',
#         '-convert-linalg-to-affine-loops',
#         '-lower-affine',
#         '-affine-super-vectorize="virtual-vector-size=4,8"',
#         '-convert-scf-to-cf',
#         '-convert-scf-to-spirv',
#         '-convert-scf-to-openmp',
#         '-pass-pipeline="func.func(convert-affine-for-to-gpu)',
#         '-convert-vector-to-scf',
#         '-pass-pipeline="func.func(convert-vector-to-gpu)"',
#         '-convert-vector-to-spirv',
#         '-convert-vector-to-llvm="enable-amx"',
#         '-convert-gpu-to-spirv',
#         '-convert-gpu-to-nvvm',
#         '-convert-spirv-to-llvm',
#         '-convert-openmp-to-llvm'
#         # '-convert-func-to-llvm'
#         ]
#     """
#    降级pass
#     Lower pass pipe :
#     #
#     # -tosa-infer-shapes    -tosa-to-arith      -pass-pipeline="func.func(tosa-to-linalg)"
#     # -convert-linalg-to-loops
#     # -convert-linalg-to-affine-loops  -lower-affine
#     # -convert-scf-to-cf
#     # -convert-func-to-llvm
#    """
#     tosa_to_linalg = '-tosa-infer-shapes  -tosa-to-arith  -pass-pipeline="func.func(tosa-to-linalg)"'
#
#     bufferize = '-func-bufferize  -linalg-bufferize'
#
#     linalg_to_affine = '-convert-linalg-to-affine-loops'
#
#     affine_to_scf = '-lower-affine'
#     affine_to_vector = '-affine-super-vectorize="virtual-vector-size=4,8"'
#
#     scf_to_cf = '-convert-scf-to-cf'
#     scf_to_spirv = '-convert-scf-to-spirv'
#     scf_to_openmp = '-convert-scf-to-openmp'
#
#     vector_to_scf = '-convert-vector-to-scf'
#     vector_to_gpu = '-pass-pipeline="func.func(convert-vector-to-gpu)"'
#     vector_to_spirv = '-convert-vector-to-spirv'
#     vector_to_llvm = '-convert-vector-to-llvm="enable-amx"'
#
#     gpu_to_spirv = '-convert-gpu-to-spirv'
#     gpu_to_nvvm = '-convert-gpu-to-nvvm'
#
#     spirv_to_llvm ='-convert-spirv-to-llvm'
#     openmp_to_llvm = '-convert-openmp-to-llvm'
#     cf_to_llvm = '-convert-func-to-llvm'
#
#
# class OptimizePass:
#     """
#     优化pass定义
#     """
#     vp = [
#         '-affine-data-copy-generate',
#         '-affine-loop-fusion',
#         '-affine-loop-invariant-code-motion',
#         '-affine-loop-tile',
#         '-affine-loop-unroll',
#         '-affine-loop-unroll-jam',
#     #     '-linalg-fuse-elementwise-ops'
#         '-scf-parallel-loop-tiling'
#     ]
#
#     all = [
#         '-affine-data-copy-generate="generate-dma=false fast-mem-space=0 skip-non-unit-stride-loops" ',
#         '-affine-loop-invariant-code-motion',
#         '-affine-loop-fusion',
#         '-affine-loop-tile',
#         '-affine-loop-unroll',
#         '-affine-loop-unroll-jam',
#         '-affine-pipeline-data-transfer',
#         '-affine-scalrep',
#         '-affine-super-vectorize',
#         '-affine-parallelize ',
#         '-affine-loop-normalize',
#         '-affine-loop-coalescing',
#         '-affine-simplify-structures',
#         '-scf-bufferize',
#         '-scf-for-loop-canonicalization',
#         '-scf-for-loop-peeling',
#         '-scf-for-loop-specialization',
#         '-scf-parallel-loop-fusion',
#         '-scf-parallel-loop-collapsing',
#         '-scf-parallel-loop-specialization',
#         '-scf-parallel-loop-tiling',
#         '-scf-for-loop-range-folding',
#         '-scf-for-to-while',
#         '-buffer-deallocation',
#         '-buffer-hoisting',
#         '-buffer-loop-hoisting',
#         '-buffer-results-to-out-params',
#         # '-finalizing-bufferize',
#         '-bufferization-bufferize',
#         '-drop-equivalent-buffer-results',
#         '-one-shot-bufferize="allow-unknown-ops"',
#         '-promote-buffers-to-stack',
#         # '-tensor-copy-insertion',
#         '-eliminate-alloc-tensors',
#         '-memref-expand',
#         #'-fold-memref-subview-ops', 无效ir
#         '-normalize-memrefs',
#         # '-resolve-ranked-shaped-type-result-dims',
#         #'-resolve-shaped-type-result-dims'  无效ir
#         '-canonicalize',
#         '-control-flow-sink',
#         '-cse',
#         '-inline',
#         # '-snapshot-op-locations',
#         '-loop-invariant-code-motion',
#         # '-print-op-stats',
#         # '-sccp',
#         # '-strip-debuginfo',
#         '-symbol-dce',
#         # '-symbol-privatize',
#         # '-view-op-graph',
#         '-topological-sort',
#         '-async-parallel-for',
#         '-async-to-async-runtime',
#         '-async-runtime-ref-counting',
#         '-async-runtime-ref-counting-opt',
#         '-async-runtime-policy-based-ref-counting',
#         '-vector-bufferize',
#         '-gpu-launch-sink-index-computations',
#         '-gpu-kernel-outlining',
#         '-gpu-async-region',
#         '-gpu-map-parallel-loops',
#         '-decorate-spirv-composite-type-layout',
#         '-spirv-canonicalize-gl',
#         '-spirv-lower-abi-attrs',
#         '-spirv-rewrite-inserts',
#         '-spirv-unify-aliased-resource',
#         '-spirv-update-vce',
#         '-llvm-legalize-for-export',
#         '-llvm-request-c-wrappers',
#         # '-llvm-optimize-for-nvvm-target'
#         #"-tosa-layerwise-constant-fold",
#         "-tosa-infer-shapes",
#         #"-tosa-make-broadcastable",
#         #"-tosa-optional-decompositions",
#         "-arith-bufferize",
#         "-arith-expand",
#         "-arith-unsigned-when-equivalent",
#         "-func-bufferize",
#         "-remove-shape-constraints",
#         "-shape-to-shape-lowering",
#         "-shape-bufferize",
#         "-tensor-bufferize"
#
#     ]
#     affine_pass = [
#         '-affine-data-copy-generate="generate-dma=false fast-mem-space=0 skip-non-unit-stride-loops" ',
#         '-affine-loop-invariant-code-motion',
#         '-affine-loop-fusion',
#         '-affine-loop-tile',
#         '-affine-loop-unroll',
#         '-affine-loop-unroll-jam',
#         '-affine-pipeline-data-transfer',
#         '-affine-scalrep',
#         '-affine-super-vectorize',
#         '-affine-parallelize ',
#         '-affine-loop-normalize',
#         '-affine-loop-coalescing',
#         '-affine-simplify-structures']
#     linalg_pass = [
#         #'-linalg-fold-unit-extent-dims', 空函数
#         #'-linalg-fuse-elementwise-ops', 空函数
#         #'-linalg-named-op-conversion', 空函数
#         #'-linalg-inline-scalar-operands', 无效ir
#         # '-linalg-bufferize',
#         # '-linalg-tile',
#         #'-linalg-generalize-named-ops', 无效ir
#         # '-linalg-detensorize',
#         # '-linalg-strategy-tile-and-fuse-pass',
#         # '-linalg-strategy-tile-pass',
#         # '-linalg-strategy-pad-pass',
#         # '-linalg-strategy-generalize-pass',
#         # '-linalg-strategy-decompose-pass',
#         # '-linalg-strategy-interchange-pass',
#         # '-linalg-strategy-peel-pass',
#         # '-linalg-strategy-vectorize-pass',
#         # '-linalg-strategy-enable-pass',
#         # '-linalg-strategy-lower-vectors-pass',
#         # '-linalg-strategy-remove-markers-pass'
#     ]
#     scf_pass = [
#         '-scf-bufferize',
#         '-scf-for-loop-canonicalization',
#         '-scf-for-loop-peeling',
#         '-scf-for-loop-specialization',
#         '-scf-parallel-loop-fusion',
#         '-scf-parallel-loop-collapsing',
#         '-scf-parallel-loop-specialization',
#         '-scf-parallel-loop-tiling',
#         '-scf-for-loop-range-folding',
#         '-scf-for-to-while'
#     ]
#     bufferize_pass = [
#         '-buffer-deallocation',
#         '-buffer-hoisting',
#         '-buffer-loop-hoisting',
#         '-buffer-results-to-out-params',
#         '-finalizing-bufferize',
#         '-bufferization-bufferize',
#         '-drop-equivalent-buffer-results',
#         '-one-shot-bufferize="allow-unknown-ops"',
#         '-promote-buffers-to-stack',
#         # '-tensor-copy-insertion',
#         '-eliminate-alloc-tensors']
#     memref_pass = [
#         '-memref-expand',
#         #'-fold-memref-subview-ops', 无效ir
#         '-normalize-memrefs',
#         # '-resolve-ranked-shaped-type-result-dims',
#         #'-resolve-shaped-type-result-dims'  无效ir
#     ]
#     general_pass = [
#         '-canonicalize',
#         '-control-flow-sink',
#         '-cse',
#         '-inline',
#         # '-snapshot-op-locations',
#         '-loop-invariant-code-motion',
#         # '-print-op-stats',
#         # '-sccp',
#         # '-strip-debuginfo',
#         '-symbol-dce',
#         # '-symbol-privatize',
#         # '-view-op-graph',
#         '-topological-sort']
#     async_pass = [
#         '-async-parallel-for',
#         '-async-to-async-runtime',
#         '-async-runtime-ref-counting',
#         '-async-runtime-ref-counting-opt',
#         '-async-runtime-policy-based-ref-counting'
#     ]
#     vector_pass = [
#         '-vector-bufferize'
#     ]
#     gpu_pass = [
#         '-gpu-launch-sink-index-computations',
#         '-gpu-kernel-outlining',
#         '-gpu-async-region',
#         '-gpu-map-parallel-loops'
#     ]
#     spirv_pass = [
#         '-decorate-spirv-composite-type-layout',
#         '-spirv-canonicalize-gl',
#         '-spirv-lower-abi-attrs',
#         '-spirv-rewrite-inserts',
#         '-spirv-unify-aliased-resource',
#         '-spirv-update-vce'
#     ]
#     llvm_pass = [
#         '-llvm-legalize-for-export',
#         '-llvm-request-c-wrappers',
#         # '-llvm-optimize-for-nvvm-target'
#     ]
#     tosa_pass = [
#         #"-tosa-layerwise-constant-fold",
#         "-tosa-infer-shapes"
#         #"-tosa-make-broadcastable",
#         #"-tosa-optional-decompositions"
#     ]
#     arith_pass = [
#         "-arith-bufferize",
#         "-arith-expand",
#         "-arith-unsigned-when-equivalent"
#     ]
#     func_pass = [
#         "-func-bufferize"
#     ]
#     shape_pass = [
#         "-remove-shape-constraints",
#         "-shape-to-shape-lowering",
#         "-shape-bufferize"
#     ]
#     tensor_pass = [
#         "-tensor-bufferize"
#     ]
#
# class WeakOptPass:
#     affine = [
#         '-affine-data-copy-generate',
#         '-affine-loop-fusion',
#         '-affine-loop-invariant-code-motion',
#         '-affine-loop-tile',
#         '-affine-loop-unroll',
#         '-affine-loop-unroll-jam'
#     ]
#     # linalg = [
#     #     '-linalg-fuse-elementwise-ops'
#     # ]
#     scf = [
#         '-scf-parallel-loop-tiling'
#     ]
#
# class WeakLowerPass:
#     scf = [
#         '-convert-scf-to-gpu',
#         '-convert-parallel-loops-to-gpu'
#     ]
#     tosa = [
#         #' -pass-pipeline="func.func(tosa-to-linalg)" '
#     ]
#     vector = [
#         '-convert-vector-to-llvm'
#     ]
#     gpu = [
#         '-convert-gpu-to-llvm',
#         '-convert-gpu-to-rocdl',
#         '-convert-gpu-to-nvvm'
#     ]
#
# class AllWeakLowerPass:
#     all_weak_lower_pass = [
#         '-convert-scf-to-gpu',
#         '-convert-parallel-loops-to-gpu',
#         # '-pass-pipeline="func.func(tosa-to-linalg)"',
#         '-convert-vector-to-llvm',
#         '-convert-gpu-to-llvm',
#         '-convert-gpu-to-rocdl',
#         '-convert-gpu-to-nvvm'
#     ]
