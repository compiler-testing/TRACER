{
  "affine": {
    "OPS_NUM": 3,
    "OPS": [
      {
        "OPS_NAME": [
          "affine.apply",
          "affine.dmastart",
          "affine.dmawait",
          "affine.load",
          "affine.min",
          "affine.max",
          "affine.parallel",
          "affine.prefetch",
          "affine.store",
          "affine.for",
          "affine.if",
          "affine.yield",
          "affine.vectorload",
          "affine.vectorstore"
        ]
      },
      {
        "OPS_NAME": [
        "affine.vectorstore",
        "affine.vectorload"
      ]
      },
      {
        "OPS_NAME":
        [
        "affine.for"
        ]
      }
    ],
    "PASS_NUM": 3,
    "PASS": [
      "-lower-affine",
      "-affine-super-vectorize=\"virtual-vector-size=4,8\"",
      "-pass-pipeline=\"builtin.module(func.func(convert-affine-for-to-gpu))\""
    ]
  } ,
  "amdgpu": {
    "OPS_NUM": 1,
    "OPS":[
      {"OPS_NAME":[
        "amdgpu.ldsbarrier",
        "rocdl.raw.buffer.load",
        "rocdl.raw.buffer.store",
        "rocdl.raw.buffer.atomic.fadd"
      ]}
    ],
    "PASS_NUM": 1,
    "PASS":["-convert-amdgpu-to-rocdl=chipset=gfx908"]
  },
  "arith": {
    "OPS_NUM": 2,
    "OPS":[
      {
        "OPS_NAME":[
          "arith.constant",
          "arith.addi",
          "arith.subi",
          "arith.arith.muli",
          "arith.divui",
          "arith.divsi",
          "arith.remui",
          "arith.remsi",
          "arith.andi",
          "arith.ori",
          "arith.xori",
          "arith.shli",
          "arith.shrui",
          "arith.shrsi",
          "arith.negf",
          "arith.addf",
          "arith.subf",
          "arith.mulf",
          "arith.divf",
          "arith.remf",
          "arith.extui",
          "arith.extsi",
          "arith.extf",
          "arith.trunci",
          "arith.truncf",
          "arith.uitofp",
          "arith.sitofp",
          "arith.fptoui",
          "arith.fptosi",
          "arith.indexcast",
          "arith.bitcast",
          "arith.cmpi",
          "arith.cmpf",
          "arith.select"
        ]
      },
      {
        "OPS_NAME":[
          "arith.constantcomposite",
          "arith.constantscalar",
          "arith.addi",
          "arith.subi",
          "arith.muli",
          "arith.divui",
          "arith.divsi",
          "arith.remui",
          "arith.remsiopgl",
          "arith.remsiopcl",
          "arith.andi",
          "arith.ori",
          "arith.xorioplogical",
          "arith.xoriopboolean",
          "arith.shli",
          "arith.shrui",
          "arith.shrsi",
          "arith.negf",
          "arith.addf",
          "arith.subf",
          "arith.mulf",
          "arith.divf",
          "arith.remf",
          "arith.extui",
          "arith.extuii1",
          "arith.extsi",
          "arith.extf",
          "arith.trunci",
          "arith.truncf",
          "arith.uitofp",
          "arith.sitofp",
          "arith.fptosi",
          "arith.indexcast",
          "arith.bitcast",
          "arith.cmpi",
          "arith.cmpf",
          "arith.select",
          "arith.maxf",
          "arith.maxsi",
          "arith.maxui",
          "arith.minf",
          "arith.minsi",
          "arith.minui"
        ]
      }
    ],
    "PASS_NUM": 2,
    "PASS":[
      "-convert-arith-to-llvm",
      ""
//      "-convert-arith-to-spirv"
    ]
  },
  "armneon":{
    "OPS_NUM": 1,
    "OPS":[
      {
        "OPS_NAME":[
          "armneon.2d.sdot"
        ]
      }
    ],
    "PASS_NUM": 1,
    "PASS":[
      "-pass-pipeline=\"builtin.module(func.func(arm-neon-2d-to-intr))\""

    ]
  },
  "async":{
    "OPS_NUM": 1,
    "OPS":[
      {
        "OPS_NAME":[
          "async.execute",
          "async.await",
          "async.yield",
          "async.runtime.setavailable",
          "async.runtime.seterroro",
          "async.runtime.iserrorg",
          "async.runtime.await",
          "async.runtime.awaitandresumeg",
          "async.runtime.resume",
          "async.runtime.addtogroup",
          "async.runtime.numworkerthreads",
          "async.runtime.addref",
          "async.runtime.dropref",
          "async.runtime.create",
          "async.runtime.creategroup",
          "async.runtime.store",
          "async.runtime.load",
          "async.coro.id",
          "async.coro.begin",
          "async.coro.free",
          "async.coro.end",
          "async.coro.save",
          "async.coro.suspend"
        ]
      }
    ],
    "PASS_NUM": 1,
    "PASS":["-convert-async-to-llvm  -async-to-async-runtime"]
  },
//  "bufferization": {
//    "OPS_NUM": 1,
//    "OPS":[
//      {
//        "OPS_NAME": [
//          "bufferization.clone",
//          "bufferization.tomemref"
//        ]
//      }
//    ],
//    "PASS_NUM": 1,
//    "PASS":[
//      "-convert-bufferization-to-memref"
//    ]
//  },
  "complex": {
    "OPS_NUM": 3,
    "OPS":[
      {"OPS_NAME":[
        "complex.pow",
        "complex.sqrt",
        "complex.tanh",
        "complex.cos",
        "complex.sin",
        "complex.conj",
        "complex.log",
        "complex.abs",
        "complex.angle"]},
      {"OPS_NAME":[
        "complex.abs",
        "complex.add",
        "complex.constant",
        "complex.create",
        "complex.div",
        "complex.im",
        "complex.mul",
        "complex.re",
        "complex.sub"
      ]},
      {"OPS_NAME":[
        "complex.abs",
        "complex.angle",
        "complex.atan2",
        "complex.add",
        "complex.sub",
        "complex.equal",
        "complex.notequal",
        "complex.conj",
        "complex.cos",
        "complex.div",
        "complex.exp",
        "complex.expm1",
        "complex.log1p",
        "complex.log",
        "complex.mul",
        "complex.neg",
        "complex.sign",
        "complex.sin",
        "complex.sqrt",
        "complex.tan",
        "complex.tanh",
        "complex.pow",
        "complex.rsqrt"
      ]}
    ],
    "PASS_NUM": 3,
    "PASS":[
      "-convert-complex-to-libm",
      "-convert-complex-to-llvm",
      "-convert-complex-to-standard"
    ]
  },
  "cf":{
    "OPS_NUM": 2,
    "OPS":[
      {"OPS_NAME":[
        "cf.br",
        "cf.condbr"
      ]},
      {"OPS_NAME":[
        "cf.assert",
        "cf.br",
        "cf.condbr",
        "cf.switch"
      ]}
    ],
    "PASS_NUM": 2,
    "PASS":["-convert-cf-to-spirv","-convert-cf-to-llvm"]
  },
  "func": {
    "OPS_NUM": 2,
    "OPS":[
      {"OPS_NAME":[
        "func.call",
        "func.return",
        "func.func"]},
      {"OPS_NAME":[
        "func.callindirect",
        "func.call",
        "func.constant",
        "func.return",
        "func.func"
      ]}
    ],
    "PASS_NUM": 2,
    "PASS":["-convert-func-to-spirv","-convert-func-to-llvm"]
  },
  "gpu": {
    "OPS_NUM": 6,
    "OPS":[
      {"OPS_NAME":[
        "gpu.launchfunc"
      ]},
      {"OPS_NAME":[
        "gpu.threadid",
        "gpu.blockdim",
        "gpu.blockid",
        "gpu.griddim",
        "gpu.return",
        "gpu.func",
        "gpu.printf"
      ]},
      {"OPS_NAME":[
        "gpu.alloc",
        "gpu.dealloc",
        "gpu.hostregister",
        "gpu.memcpy",
        "gpu.memset",
        "gpu.setdefaultdevice",
        "gpu.wait",
        "async.yield",
        "gpu.launchfunc",
        "gpu.module"
      ]},
      {"OPS_NAME":[
        "gpu.threadid",
        "gpu.blockdim",
        "gpu.blockid",
        "gpu.griddim",
        "gpu.laneid",
        "gpu.shuffle",
        "gpu.return",
        "gpu.func",
        "gpu.subgroupmmaloadmatrix",
        "gpu.subgroupmmacompute",
        "gpu.subgroupmmastorematrix",
        "gpu.subgroupmmaconstantmatrix",
        "gpu.subgroupmmaelementwise"
      ]},
      {"OPS_NAME":[
        "gpu.barrier",
        "gpu.func",
        "gpu.module",
        "gpu.moduleend",
        "gpu.return",
        "gpu.blockid",
        "gpu.griddim",
        "gpu.blockdim",
        "gpu.threadid",
        "gpu.globalid",
        "gpu.subgroupid",
        "gpu.numsubgroups",
        "gpu.subgroupsize",
        "gpu.workgroupsize"
      ]},
      {"OPS_NAME":[
        "gpu.launch_func"
      ]}
    ],
    "PASS_NUM": 6,
    "PASS":[
      "-lower-host-to-llvm",
      "-convert-gpu-to-rocdl",
      "-gpu-to-llvm",
      "-convert-gpu-to-nvvm",
      "-convert-gpu-to-spirv",
      "-convert-gpu-launch-to-vulkan-launch"
    ]
  },
//  "linalg":{
//    "OPS_NUM": 1,
//    "OPS":[
//      {"OPS_NAME":["linalg.inittensor"]}
//    ],
//    "PASS_NUM": 1,
//    "PASS":[
//      "-linalg-init-tensor-to-alloc-tensor"
//    ]
//  },
  "llvm": {
    "OPS_NUM": 1,
    "OPS": [
      {"OPS_NAME":["llvm.fdiv"]}
    ],
    "PASS_NUM": 1,
    "PASS": ["-llvm-optimize-for-nvvm-target"]
  },
  "math": {
    "OPS_NUM": 3,
    "OPS":[
      {"OPS_NAME":[
        "math.atan2",
        "math.expm1",
        "math.tanh",
        "math.cos",
        "math.sin",
        "math.erf",
        "math.round",
        "math.atan",
        "math.tan"
      ]},
      {"OPS_NAME":[
        "math.abs",
        "math.ceil",
        "math.copysign",
        "math.cos",
        "math.countleadingzeros",
        "math.counttrailingzeros",
        "math.ctpopf",
        "math.exp2",
        "math.expm1",
        "math.exp",
        "math.floor",
        "math.fma",
        "math.log10",
        "math.log1p",
        "math.log2",
        "math.log",
        "math.powf",
        "math.round",
        "math.rsqrt",
        "math.sin",
        "math.sqrt"
      ]},
      {"OPS_NAME":[
        "math.copysign",
        "math.countleadingzeros",
        "math.log1p",
        "math.expm1",
        "math.powf",
        "math.roundoppattern",
        "math.abs",
        "math.ceil",
        "math.cos",
        "math.exp",
        "math.floor",
        "math.fma",
        "math.log",
        "math.rsqrt",
        "math.sin",
        "math.sqrt",
        "math.tanh",
        "math.erf"
      ]}
    ],
    "PASS_NUM": 3,
    "PASS":[
//      "-convert-math-to-libm",
      "",
      "-convert-math-to-llvm",
      "-convert-math-to-spirv"
    ]
  },
  "memref": {
    "OPS_NUM": 2,
    "OPS":[
      {"OPS_NAME":[
        "memref.alloca",
        "memref.alloc",
        "memref.dealloc",
        "memref.intload",
        "memref.intstore",
        "memref.load",
        "memref.store"
      ]},
      {"OPS_NAME":[
        "memref.alloca",
        "memref.allocascope",
        "memref.atomicrmw",
        "memref.assumealignment",
        "memref.dim",
        "memref.genericatomicrmw",
        "memref.globalmemref",
        "memref.getglobalmemref",
        "memref.load",
        "memref.cast",
        "memref.copy",
        "memref.reinterpretcast",
        "memref.reshape",
        "memref.prefetch",
        "memref.rank",
        "memref.expandshape",
        "memref.collapseshape",
        "memref.store",
        "memref.subview",
        "memref.transpose",
        "memref.view",
        "memref.alignedalloc",
        "memref.dealloc",
        "memref.alloc"
      ]}
    ],
    "PASS_NUM": 2,
    "PASS":["-convert-memref-to-spirv","-convert-memref-to-llvm"]
  },
  "nvgpu": {
    "OPS_NUM": 1,
    "OPS":[
      {"OPS_NAME":[
        "nvgpu.mma.sync",
        "nvgpu.ldmatrix",
        "nvgpu.deviceasynccopy",
        "nvgpu.deviceasynccreategroup",
        "nvgpu.deviceasyncwait"]}
    ],
    "PASS_NUM": 1,
    "PASS":["-convert-nvgpu-to-nvvm"]
  },
  "acc": {
    "OPS_NUM": 2,
    "OPS":[
      {"OPS_NAME":[
        "acc.enterdata",
        "acc.exitdata",
        "acc.update"
      ]},
      {"OPS_NAME":[
        "acc.data",
        "acc.enterdata",
        "acc.exitdata",
        "acc.parallel",
        "acc.update"
      ]}
    ],
    "PASS_NUM": 2,
    "PASS":["-convert-openacc-to-scf","-convert-openacc-to-llvm"]
  },
  "omp": {
    "OPS_NUM": 1,
    "OPS":[
      {"OPS_NAME":[
        "omp.reduction",
        "omp.critical",
        "omp.master",
        "omp.reduction",
        "omp.master",
        "omp.parallel",
        "omp.wsloop",
        "omp.sections",
        "omp.single",
        "omp.atomicread",
        "omp.atomicwrite",
        "omp.flush",
        "omp.threadprivate"
      ]}
    ],
    "PASS_NUM": 1,
    "PASS":["-convert-openmp-to-llvm"]
  },
  "pdl": {
    "OPS_NUM": 1,
    "OPS": [
      {
        "OPS_NAME": [
          "pdl.apply_native_constraint",
          "pdl.apply_native_rewrite",
          "pdl.attribute",
          "pdl.erase",
          "pdl.operand",
          "pdl.operands",
          "pdl.operation",
          "pdl.pattern",
          "pdl.replace",
          "pdl.result",
          "pdl.results",
          "pdl.rewrite",
          "pdl.type",
          "pdl.types"
        ]
      }
    ],
    "PASS_NUM": 1,
    "PASS": ["-convert-pdl-to-pdl-interp"]
  },
  "scf": {
    "OPS_NUM": 4,
    "OPS":[
      {"OPS_NAME":[
        "scf.parallel"
      ]},
      {"OPS_NAME":[
        "scf.parallel"
      ]},
      {"OPS_NAME":[
        "scf.for",
        "scf.if",
        "scf.yield",
        "scf.while"
      ]},
      {"OPS_NAME":[
        "scf.for",
        "scf.if",
        "scf.parallel",
        "scf.while",
        "scf.executeregion"
      ]}
    ],
    "PASS_NUM": 4,
    "PASS":[
      "-convert-parallel-loops-to-gpu",
      "-convert-scf-to-openmp",
//      "-convert-scf-to-spirv",
      "",
      "-convert-scf-to-cf"
    ]
  },
  "shape": {
    "OPS_NUM": 2,
    "OPS":[
      {"OPS_NAME":[
        "shape.cstreq",
        "shape.broadcast",
        "shape.cstrrequire"
      ]},
      {"OPS_NAME":[
        "shape.any",
        "shape.add",
        "shape.mul",
        "shape.broadcast",
        "shape.constshape",
        "shape.constsize",
        "shape.isbroadcastable",
        "shape.getextent",
        "shape.rank",
        "shape.reduce",
        "shape.shapeeq",
        "shape.shapeof",
        "shape.splitat",
        "shape.toextenttensor"
      ]}
    ],
    "PASS_NUM": 2,
    "PASS":["-convert-shape-constraints","-convert-shape-to-std"]
  },
  "spv": {
    "OPS_NUM": 2,
    "OPS":[
      {"OPS_NAME":[
        "gpu.launchfunc",
        "spv.module"]},
      {"OPS_NAME":[
        "spv.IAdd",
        "spv.IMul",
        "spv.ISub",
        "spv.FAdd",
        "spv.FDiv",
        "spv.FMul",
        "spv.FNegate",
        "spv.FRem",
        "spv.FSub",
        "spv.SDiv",
        "spv.SRem",
        "spv.UDiv",
        "spv.UMod",
        "spv.BitCount",
        "spv.BitReverse",
        "spv.BitwiseAnd",
        "spv.BitwiseOr",
        "spv.BitwiseXor",
        "spv.Not",
        "spv.Bitcast",
        "spv.ConvertFToS",
        "spv.ConvertFToU",
        "spv.ConvertSToF",
        "spv.ConvertUToF",
        "spv.FConvert",
        "spv.SConvert",
        "spv.UConvert",
        "spv.IEqual",
        "spv.INotEqual",
        "spv.FOrdEqual",
        "spv.FOrdGreaterThan",
        "spv.FOrdGreaterThanEqual",
        "spv.FOrdLessThanEqual",
        "spv.FOrdLessThan",
        "spv.FOrdNotEqual",
        "spv.FUnordEqual",
        "spv.FUnordGreaterThan",
        "spv.FUnordGreaterThanEqual",
        "spv.FUnordLessThanEqual",
        "spv.FUnordLessThan",
        "spv.FUnordNotEqual",
        "spv.SGreaterThan",
        "spv.SGreaterThanEqual",
        "spv.SLessThanEqual",
        "spv.SLessThan",
        "spv.UGreaterThan",
        "spv.UGreaterThanEqual",
        "spv.ULessThanEqual",
        "spv.ULessThan",
        "spv.Constant",
        "spv.Branch",
        "spv.BranchConditional",
        "spv.FunctionCall",
        "spv.Loop",
        "spv.Selection",
        "spv.Merge",
        "spv.EntryPoint",
        "spv.ExecutionMode",
        "spv.GL.Ceil",
        "spv.GL.Cos",
        "spv.GL.Exp",
        "spv.GL.FAbs",
        "spv.GL.Floor",
        "spv.GL.FMax",
        "spv.GL.FMin",
        "spv.GL.Log",
        "spv.GL.Sin",
        "spv.GL.SMax",
        "spv.GL.SMin",
        "spv.GL.Sqrt",
        "spv.GL.InverseSqrt",
        "spv.GL.Tan",
        "spv.GL.Tanh",
        "spv.LogicalAnd",
        "spv.LogicalOr",
        "spv.LogicalEqual",
        "spv.LogicalNotEqual",
        "spv.LogicalNot",
        "spv.AccessChain",
        "spv.AddressOf",
        "spv.GlobalVariable",
        "spv.Load",
        "spv.Store",
        "spv.Variable",
        "spv.CompositeExtract",
        "spv.CompositeInsert",
        "spv.Select",
        "spv.Undef",
        "spv.VectorShuffle",
        "spv.ShiftRightArithmetic",
        "spv.ShiftRightLogical",
        "spv.ShiftLeftLogical",
        "spv.Return",
        "spv.ReturnValue"
      ]}
    ],
    "PASS_NUM": 2,
    "PASS":["-lower-host-to-llvm","-convert-spirv-to-llvm"]
  },
  "tensor": {
    "OPS_NUM": 2,
    "OPS":[
      {"OPS_NAME":["tensor.pad"]},
      {"OPS_NAME":["tensor.extract"]}
    ],
    "PASS_NUM": 2,
    "PASS":["-convert-tensor-to-linalg","-convert-tensor-to-spirv"]
  },
  "tosa": {
    "OPS_NUM": 5,
    "OPS":[
      {"OPS_NAME":[
        "tosa.const",
        "tosa.applyscale"
      ]},
      {"OPS_NAME":[
        "tosa.slice"
      ]},
      {"OPS_NAME":[
        "tosa.condif",
        "tosa.whileloop"
      ]},
      {"OPS_NAME":[
        "tosa.conv2d",
        "tosa.depthwiseconv2d",
        "tosa.matmul",
        "tosa.maxpool2d",
        "tosa.avgpool2d",
        "tosa.fullyconnected"
      ]},
      {"OPS_NAME":[
        "tosa.add",
        "tosa.sub",
        "tosa.mul",
        "tosa.div",
        "tosa.negate",
        "tosa.pow",
        "tosa.reciprocal",
        "tosa.rsqrt",
        "tosa.log",
        "tosa.exp",
        "tosa.abs",
        "tosa.tanh",
        "tosa.bitwiseand",
        "tosa.bitwiseor",
        "tosa.bitwisenot",
        "tosa.bitwisexor",
        "tosa.logicaland",
        "tosa.logicalnot",
        "tosa.logicalor",
        "tosa.logicalxor",
        "tosa.castop",
        "tosa.logicalleftshift",
        "tosa.logicalrightshift",
        "tosa.arithmeticrightshift",
        "tosa.clz",
        "tosa.select",
        "tosa.greater",
        "tosa.greaterequal",
        "tosa.equal",
        "tosa.maximum",
        "tosa.minimum",
        "tosa.ceil",
        "tosa.floor",
        "tosa.clamp",
        "tosa.relun",
        "tosa.sigmoid",
        "tosa.identity",
        "tosa.reduceall",
        "tosa.reduceany",
        "tosa.reducemin",
        "tosa.reducemax",
        "tosa.reducesum",
        "tosa.reduceprod",
        "tosa.argmax",
        "tosa.concat",
        "tosa.gather",
        "tosa.pad",
        "tosa.reshape",
        "tosa.rescale",
        "tosa.resize",
        "tosa.reverse",
        "tosa.table",
        "tosa.tile",
        "tosa.transpose"
      ]}
    ],
    "PASS_NUM": 5,
    "PASS":[
      "-tosa-to-arith",
      "-tosa-to-tensor",
      "-tosa-to-scf",
      "-pass-pipeline=\"builtin.module(func.func(tosa-to-linalg-named))\"",
      "-pass-pipeline=\"builtin.module(func.func(tosa-to-linalg-named,tosa-to-linalg))\""
    ]
  },
  "vector": {
    "OPS_NUM": 5,
    "OPS":[
      {"OPS_NAME":[
        "vector.transferread",
        "vector.transferwrite"
      ]},
      {"OPS_NAME":[
        "vector.bitcast",
        "vector.broadcast",
        "vector.extractelement",
        "vector.extract",
        "vector.extractstridedslice",
        "vector.fma",
        "vector.insertelement",
        "vector.insert",
        "vector.reduction",
        "vector.insertstridedslice",
        "vector.shuffle",
        "vector.splat"
      ]},
      {"OPS_NAME":[
        "vector.contract",
        "vector.transpose"
      ]},
      {"OPS_NAME":[
        "vector.matrixmultiply",
        "vector.flattranspose",
        "vector.fma",
        "vector.reduction",
        "vector.createmask",
        "vector.bitcast",
        "vector.shuffle",
        "vector.extractelement",
        "vector.extract",
        "vector.fmaop1d",
        "vector.insertelement",
        "vector.insert",
        "vector.print",
        "vector.typecast",
        "vector.scale",
        "vector.load",
        "vector.maskedload",
        "vector.store",
        "vector.maskedstore",
        "vector.gather",
        "vector.scatter",
        "vector.expandload",
        "vector.compressstore",
        "vector.splat",
        "vector.splatnd"
      ]},
      {"OPS_NAME":[]}
    ],
    "PASS_NUM": 5,
    "PASS":[
      "-convert-vector-to-scf",
      "",
      // "-convert-vector-to-spirv",
      "-convert-vector-to-gpu",
      "-convert-vector-to-llvm",
      "-convert-vector-to-rocdl"
    ]
  }
}